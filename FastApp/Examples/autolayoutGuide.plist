<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>11</key>
	<string>全屏填充，很明显，是将一个控件按其父控件大小，放置在父控件上，当然此时二者中心必然重合。【注意事项：本方法无需设置子控件大小，即使设置了，也是无效的】</string>
    <key>12</key>
    <string>等边距自适应宽高，此时父控件与子控件中心位置重合，子控件外边距四周相等且距离父控件内边距为指定距离。【注意事项：本方法无需设置子控件大小，即使设置了，也是无效的】</string>
    <key>13</key>
    <string>固定宽高，即为子控件指定固定大小。此时子控件四周边距将根据自身大小自适应。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>14</key>
    <string>指定边距，此时子控件宽高将根据四周的距离动态改变，如果四周左右、上下距离均不等，则父控件与子控件的中心就不会重合。【注意事项：本方法无需设置子控件大小，即使设置了，也是无效的】</string>
    <key>15</key>
    <string>此时子控件宽或高等于父控件宽或高，如果要居中，则左和右必须相等，或者上下必须相等，或者不会居中摆放。【注意事项：本方法无需设置子控件大小，即使设置了，也是无效的】</string>
    
    <key>21</key>
    <string>将固定宽高的子控件摆放在父控件左上角位置。此时左上角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件左上角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>22</key>
    <string>将固定宽高的子控件摆放在父控件左上角位置。此时左上角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件左上角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>23</key>
    <string>将固定宽高的子控件摆放在父控件左中部位置。此时左边距由传入参数决定。如果为0，则以父控件左中部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>24</key>
    <string>将固定宽高的子控件摆放在父控件左中部位置。此时左边距由传入参数决定。如果为0，则以父控件左中部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误，如果宽或高有一个为0，则为0的宽或高就等于父控件宽或高】</string>
    <key>25</key>
    <string>将固定宽高的子控件摆放在父控件左下角位置。此时左下角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件左下角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>26</key>
    <string>将固定宽高的子控件摆放在父控件左下角位置。此时左下角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件左下角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    
    <key>31</key>
    <string>将固定宽高的子控件摆放在父控件右上角位置。此时右上角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件右上角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>32</key>
    <string>将固定宽高的子控件摆放在父控件右上角位置。此时右上角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件右上角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>33</key>
    <string>将固定宽高的子控件摆放在父控件右中部位置。此时右边距由传入参数决定。如果为0，则以父控件右中部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>34</key>
    <string>将固定宽高的子控件摆放在父控件右中部位置。此时右边距由传入参数决定。如果为0，则以父控件右中部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误，如果宽或高有一个为0，则为0的宽或高就等于父控件宽或高】</string>
    <key>35</key>
    <string>将固定宽高的子控件摆放在父控件右下角位置。此时右下角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件右下角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>36</key>
    <string>将固定宽高的子控件摆放在父控件右下角位置。此时右下角横向、纵向的距离由传入参数决定。如果为CGSizeZero，则以父控件右下角定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    
    <key>41</key>
    <string>将固定宽高的子控件摆放在父控件中上方位置。此时上边距由传入参数决定。如果为0，则以父控件中顶部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>42</key>
    <string>将固定宽高的子控件摆放在父控件中上方位置。此时上边距由传入参数决定。如果为0，则以父控件中顶部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误，如果宽或高有一个为0，则为0的宽或高就等于父控件宽或高】</string>
    <key>43</key>
    <string>将固定宽高的子控件摆放在父控件中下方位置。此时下边距由传入参数决定。如果为0，则以父控件中底部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    <key>44</key>
    <string>将固定宽高的子控件摆放在父控件中下方位置。此时下边距由传入参数决定。如果为0，则以父控件中底部定位。【特别提醒：本方法一定要指定子控件大小，否则布局系统将发出崩溃错误，如果宽或高有一个为0，则为0的宽或高就等于父控件宽或高】</string>
    
    <key>51</key>
    <string>固定宽高，同级控件间相对定位(外部各边上中下、左中右)。大多数情况下，我们并不想根据父控件位置来定位子控件，因为相对坐标更容易计算，也更便于理解，这时需要根据同级控件相对位置来定位。所以就有了你现在看到的这个画面。【特别提醒：外部相对定位需要指定子控件大小，否则布局系统将发出崩溃错误】</string>
    </dict>
</plist>
